<?xml version="1.0" encoding="utf-8"?>
<chapter id="templates" status="Unproofed">
    <title>Templates</title>
    <intro>
        <p id="i1">Yesod is built upon the <hackage>hamlet</hackage> package, which provides three templating systems: Hamlet (HTML), Cassius (CSS) and Julius (Javascript). These systems are all available for use outside the realm of Yesod.</p>
        <p id="i2">In this chapter, we will explore the syntax of these languages, how they can be combined to form complete documents, and where to actually put the content.</p>
        <p id="i3">To start off, our examples will use the same quasi-quotation syntax as the <link chapter="basics">basics chapter</link>, and we will move on from there.</p>
        <advanced>
            <p id="i4">Just a little heads-up: in order to simplify the examples in this chapter, we're going to assume the OverloadedStrings language extension. If you rather not use this extension, you'll need to make some minor modifications, such as replacing:</p>
            <codeblock>setTitle "Home Page"</codeblock>
            <p id="i5">with</p>
            <codeblock>setTitle $ string "Home Page"</codeblock>
        </advanced>
    </intro>
    <section id="example-hamlet">
        <title>A Hamlet example</title>
        <p id="eh1">
          The goal of hamlet syntax is essentially to remove all redundancy from html. By staying closer to html, we can:
          <ul>
            <li>avoid learning arbitrarily new syntax</li>
            <li>appeal to a wider variety of programmers and</li>
            <li>appeal to designers</li>
          </ul>
        </p>
        <snippet name="example-hamlet1"/>
        <p id="eh2">
          Just by making white space significant and removing closing tags, we eliminate the main source of invalid html. With that, and some id/class shortcuts, and making attribute quoting optional, we have eliminated the main sources of tedium in html.
        </p>
    </section>
    <section id="type-safety">
        <title>Type Safety</title>
        <p id="ts1">One of the biggest features of Yesod is its pervasive type safety. This was the original impetus for the creation of Hamlet. As such, all variable interpolations gets checked at compile time. Hamlet supports three forms of interpolation:</p>
        <ul>
            <li>Any instance of the ToHtml typeclass. This includes String and Html. This is also where Hamlet shows great <abbr title="Cross Site Scripting">XSS</abbr>-attack resilience: whenever interpolating a String, Hamlet automatically escapes all HTML entities. This is called <term>variable interpolation</term>.</li>
            <li>Type-safe URLs. We mentioned in <link chapter="basics">the basics chapter</link> that each URL can be represented as a Haskell value, and then we use a render function to convert those values into strings. Hamlet allows you to interpolate those type-safe URLs directly. This is called <term>URL interpolation</term>.</li>
            <li>Other Hamlet templates. This is great for creating a chunk of code that will be reused in other templates. This is called <term>embedding</term>.</li>
        </ul>
        <p id="ts2">Cassius provides support for the first two forms of interpolation, but instead of the ToHtml typeclass, there is the ToCss typeclass. Embedding does not make as much sense with CSS. Julius provides support for all three.</p>
        <advanced><p id="ts3">Cassius used to provide support for something similar to embedding, called mixins. This was removed due to implementation details regarding the whitespace syntax. There are plans for an alternate CSS templating language which will not be whitespace sensitive, which will hopefully reintroduce mixins, along with some other nice features.</p></advanced>
        <p id="ts4">In order to perform an interpolation, you enter the interpolation character, followed by the variable inside braces. For example, <code>My name is #{name}</code>. The hash is used for variable interpolation, at-sign (@) for URL interpolation, and caret (^) for embedding.</p>
    </section>
    <section id="basic-syntax">
        <title>Basic syntax</title>
        <p id="bs1">We have already seen some Hamlet in the <link chapter="basics">basics chapter</link>. Let's have a quick review of our Hello World example:</p>
        <snippet name="basics-helloworld"/>

        <p id="bs2">Line 13 shows our Hamlet quasi-quotation, surrounded by <code>[$hamlet| and |]</code>. The Haskell compiler knows to parse the internal code, convert it to Haskell, and then compile that.</p>
        <p id="bs3">But that's a really boring HTML page: it's just the text "Hello World!" without any tags! Let's see something a little bit more interesting:</p>
        <snippet name="templates-helloworld2"/>
        <p id="bs4">Overall, Hamlet syntax looks fairly similar to HTML. However, there is one important difference: instead of closing tags manually, nesting is determined by indentation level. The goal of Hamlet is to provide a less error-prone, more <abbr title="Don't Repeat Yourself">DRY</abbr> syntax for HTML, without introducing a completely foreign language that developers and designers will need to relearn.</p>
        <p id="bs4a">Similarly, Cassius is also whitespace-sensitive: </p>
        <snippet name="templates-helloworld3"/>
        <p id="bs5">On the other hand, Julius is mostly a pass-through format, allowing you to write your Javascript however you like:</p>
        <snippet name="templates-helloworld4"/>
    </section>
    <section id="tags">
        <title>Tags</title>
        <p id="t1">Besides the whitespace rules, Hamlet also provides a few more features to make your life a little bit easier.</p>
        <snippet name="templates-tags"/>
        <p id="t2">Let's start on line 2. In Hamlet, instead of writing <code>id="my-id"</code>, you can use the css-selector: <code>#my-id</code>. The same applies to classes: <code>.my-class</code>.</p>
        <p id="t3">Next, compare line 2 with lines 4 and 6: line 2 does not complete the tag, it just leaves it open (no greater than sign), while lines 4 and 6 <b>do</b> complete it. In Hamlet, the greater than sign is optional. However, it <i>is</i> required if you want to put content on the same line as the tag.</p>
        <p id="t4">The last thing to note is how we handle whitespace. On line 3, we want to force an extra space at the end of the line, so that there will be a space between the word has and the &lt;b&gt; tag. When we place the hash at the end of the line by itself, Hamlet ignores it entirely, and therefore only the space is kept. (If you really want to output a hash at the end of a line, simply put two, and Hamlet will ignore the second one.)</p>
        <advanced>
            <p id="t5">Technically speaking, the trailing hash isn't necessary: if you leave a space at the end of a line, Hamlet will notice it and use it. However, some text editors will silently trim trailing whitespace, and it can be confusing to readers of your code. Therefore, using the trailing hash is recommended.</p>
        </advanced>
        <p id="t6">The other trick is whitespace at the beginning of a line. Since Hamlet is nested using whitespace, adding extra spaces will only increase the nesting level. To fix this, on line 5, we start the line with a backslash. Once we have the backslash, the nesting level is determined, and any whitespace we see is interpreted literally. (Like the trailing hash, if you need to start a line with a backslash, just use two of them.)</p>
        <advanced>
            <p id="t7">When it comes to tag attributes, you can write them either with or without quotes. In other words, the following lines are equivalent:</p>
            <codeblock>&lt;a target="_blank" href="@{MyDest}"
&lt;a target=_blank href=@{MyDest}</codeblock>
            <p id="t8">Either way, Hamlet will generate HTML which quotes the attribute values. The only time you <b>must</b> use the quotes in Hamlet is when your attribute values contain whitespace.</p>
        </advanced>
    </section>
    <section id="variables">
        <title>Variables</title>
        <p id="v1">There's nothing really special about the above examples: they just show some alternative syntax for HTML and CSS. The nice thing is to see how the templates are able to interact with a surrounding program. (For the moment, accept the addHamlet, addCassius and addJulius functions as magic; we will cover them when we discuss <link chapter="widgets">widgets</link>.)</p>
        <snippet name="templates-variables"/>
        <p id="v2">We see two variable interpolations on line 8. The first one looks a little bit funny, but the first hash is indicating that this is an ID. In other words, it is equivalent to <code>&lt;span id=#{nameId}&gt;</code>. The second interpolation simply outputs the name into the content of the page.</p>
        <p id="v3">On line 11, we use a <term>type-safe URL</term>: Yesod will automatically render <code>HomeR</code> into a proper URL to that resource. On line 15, we reference the same nameId variable in our Cassius as we did earlier in Hamlet. This exposes a nice trick: instead of typing in identifiers in HTML and CSS directly, we can use Haskell variables. This gives two benefits:</p>
        <ul>
            <li>If you make a typo, the compiler will catch it.</li>
            <li>Yesod can automatically generate unique identifiers (using the <code>newIdent</code> function) for you, and you can then use those to synchronize your Hamlet, Cassius and Julius code. This produces much more composable code, since you are guaranteed that names will not clash.</li>
        </ul>
        <p id="v4">Finally, line 20 simply let's you know that Julius can do this too.</p> <!-- FIXME add a link to the (eventual) section on newIdent -->
    </section>
    <section id="functions">
        <title>Function Application</title>
        <p id="f1">You can do much more than just reference variables with interpolation: you can do complete function applications. Some examples are in order:</p>
        <snippet name="templates-functions"/>
        <p id="f2">The key lines are 22, 27 and 31. You can see that:</p>
        <ul>
            <li>You can include string and numeric literals in interpolations.</li>
            <li>You can apply functions and constructors to values.</li>
            <li>Binding order works the same as in Haskell.</li>
            <li>You can use the dollar sign ($) operator like you can in Haskell to control binding order.</li>
            <li>You can also use parantheses.</li>
        </ul>
        <p id="f3">The syntax for the contents of an interpolation are identical amongst Hamlet, Cassius and Julius, and do not depend on the type of interpolation (variable, URL or embedding).</p>
    </section>
    <section id="control">
        <title>Hamlet Control Structures</title>
        <p id="c1">In addition to simple interpolations, Hamlet (though not Cassius or Julius) provides a few control structures, namely:</p>
        <ul>
            <li>if/elseif/else</li>
            <li>forall</li>
            <li>maybe/nothing</li>
        </ul>
        <p id="c2">For all control structures, the line must begin with a dollar sign and be followed immediately by the name of the control structure. Let's see a concrete example:</p>
        <snippet name="templates-control"/>
        <p id="c3">Line 10 shows the syntax of a forall. In particular, we mimick the variable binding syntax of do-notation to grab each variable from a list. Also, the pattern of li inside of $forall inside of ul is a very common one in Hamlet.</p>
        <p id="c4">Lines 15 through 20 show usage of if/elseif/else. There is no variable binding here, and usage is fairly straight-forward. Notice that as long as we are inside the $forall block, we can refer to the person variable.</p>
        <p id="c5">Finally, 24 and 26 show us maybe and nothing. Like forall, maybe uses do-notation variable binding for its value. On the other hand, nothing does not have any values associated, and therefore no binding is performed.</p>
    </section>
    <section id="comments">
        <title>Comments</title>
        <p id="com1">FIXME</p>
        <!-- FIXME mention doctype !!! -->
    </section>
    <section id="external-files">
        <title>Templates in External Files</title>
        <p id="et1">Quasi-quoting your templates can be convenient, as no extra files are needed, your template is close to your code, and recompilation happens automatically whenever your template changes. On the other hand, this also clutters your Haskell code with templates and requires a recompile for any change in the template. Hamlet provides two sets of functions for including an external template:</p>

        <ul>
            <li>hamletFile/cassiusFile/juliusFile</li>
            <li>hamletFileDebug/cassiusFileDebug/juliusFileDebug</li>
        </ul>
        <p id="et2">What's very nice about these is that they have the exact same type signature, so they can be exchanged without changing your code otherwise. These functions are not exported by the Yesod module and must be imported directly from their respective modules (Text.Hamlet, Text.Cassius, Text.Julius). You'll see in a second why that is.</p>
        <p id="et3">Usage is very straight-forward. Assuming there is a Hamlet template stored in "my-template.hamlet", you could write:</p>

        <codeblock>defaultLayout $(hamletFile "my-template.hamlet")</codeblock>

        <p id="et4">For those not familiar, the dollar sign and parantheses indicate a Template Haskell interpolation. Using the second set of functions, the above would become:</p>

        <codeblock>defaultLayout $(hamletFileDebug "my-template.hamlet")</codeblock>

        <p id="et5">Note that in order to use this, you need to enable the TemplateHaskell language extension. You can do so by adding the following line to the top of your source file:</p>

        <codeblock>{-# LANGUAGE TemplateHaskell #-}</codeblock>

        <p id="et6">So why do we have two sets of functions? The first fully embeds the contents of the template in the code at compile time and never looks at the template again until a recompile. This is ideal for a production environment: compile your code and you have no runtime dependency on any template files. It also avoids a runtime penalty of needing to read a file.</p>

        <p id="et7">The debug set of functions is intended for development. These functions work a little bit of magic: at compile time, they inspect your template, determine which variables they reference, and generate some Haskell code to load up those variables. At run time, they read in the template again and feed in those variables. This has a number of implications:</p>

        <ul>
            <li>Changes to your template become immediately visible upon saving the file, no recompile required.</li>
            <li>If you introduce new variables to the template that were not there before, you'll need to recompile. This might require you manually nudging GHC to recompile the Haskell file, since it won't think anything has changed.</li>
            <li>Due to some of the tricks needed to pull this off, some of the more corner cases of templates are not supported. For example, using a forall to bind a function to a variable. This is an obscure enough case that it shouldn't be an issue.</li>
        </ul>
        <p id="et8">This is also the reason why Yesod does not export these functions by default. The Yesod scaffolding tool creates a Settings.hs file which exports these functions, in a slightly modified form, and chooses whether to use the debug or regular version based upon build flags. Long story short: it automatically uses the debug version during development and non-debug version during production.</p>
        <p id="et9">Excepting very short templates, this is probably how you'll write most of your templates in Yesod. The typical file structure is to create hamlet, cassius and julius folders and place the respective templates in each. Each template has a filename extension matching the template language. In other words, you'd typically have:</p>

        <codeblock># hamlet/homepage.hamlet
&lt;h1&gt;Hello World!

# cassius/homepage.cassius
h1
    color: green

# julius/homepage.julius
alert("Don't you hate it when you get an alert when you open a page?");
    
# Settings.hs, paraphrasing
import qualified Text.Hamlet
import qualified Text.Cassius
import qualified Text.Julius

hamletFile x = Text.Hamlet.hamletFileDebug $ "hamlet/" ++ x ++ ".hamlet"
- - same for cassius and julius
- - when moving to production, you would just remove Debug

# And finally your handler code
import Settings
getHomeR = defaultLayout $ do
    setTitle "Homepage"
    addHamlet $(hamletFile "homepage")
    addCassius $(cassiusFile "homepage")
    addJulius $(juliusFile "homepage")</codeblock>
        <p id="et10">For simplicity, most of the examples in this book will use quasi-quoted syntax. Just remember that you can always swap this out for external files.</p>
    </section>
    <section id="types">
        <title>Types</title>
        <p id="types1">I have purposely skirted the issue of what the value of these templates is. Let's start of with Cassius: Text.Cassius defines a datatype called <code>Css</code>. Then the value of a cassius template is:</p>
        <codeblock>type Cassius url = (url -> [(String, String)] -> String) -> Css</codeblock>
        <p id="types2">That's a little bit intimidating, so let's break it down. Cassius takes a type parameter, url, which is the datatype of our type-safe URL. A Cassius value itself is a function: the argument to the function is a <term>URL rendering function</term>, which given a type-safe URL value and a list of query string parameters, produces a URL. Using that, a Cassius value can produce a Css value. Yesod itself knows how to apply the URL rendering function and unwrap the Css value, so unless you want to dig under the surface, you won't need to get your hands dirty.</p>
        <p id="types3">Julius is almost identical. Instead of Css, it defines a type Javascript, and then has a datatype:</p>
        <codeblock>type Julius url = (url -> [(String, String)] -> String) -> Javascript</codeblock>
        <p id="types4">Now, you're probably expecting me to say that the same holds true for Hamlet. Well... it sort of does. Instead of defining its own Html datatype, Hamlet borrows the datatype from <hackage>blaze-html</hackage>. But then it does define a Hamlet type synonym:</p>
        <codeblock>type Hamlet url = (url -> [(String, String)] -> String) -> Html</codeblock>
        <p id="types5">However, Hamlet has an extra feature that Cassius and Julius don't have: polymorphism. This means that a Hamlet template can take on various values, including Html and Hamlet. Yesod defines an instance for Widget, meaning that a Hamlet template can be used directly as a widget. In fact, we have been abusing that fact every time we have written <code>defaultLayout [$hamlet|...|]</code> without using <code>addHamlet</code>.</p>
        <p id="types6">When we <link chapter="widgets">get to widgets</link>, we will explore why this polymorphism is so useful. As a heads up: it really saves the day when dealing with forms.</p>
    </section>
    <summary>
        <p id="s1">Yesod has templating languages for HTML, CSS and Javascript. All of them allow variable interpolation, safe handling of URLs and embedding sub-templates. Since the code is dealt with at compile time, you can use the compiler as your friend and get strong type safety guarantees. Oh, and XSS vulnerabilities get handled automatically.</p>
        <p id="s2">There are three ways to embed the templates: through quasi-quotation, regular external and debug external. Quasi-quotation is great for small, simple templates that won't be changing often. Debug mode is great for development, and since it has the same type signature as the regular external functions, you can easily switch to using them for your production code.</p>
    </summary>
</chapter>
