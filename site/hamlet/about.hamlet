<section #why>
    <h1>Why
    <p>
        Users of Yesod are web developers that want something better. Much of today's web development occurs in dynamic languages like PHP, Python, and Ruby. We see the results: cross-site scripting attacks, applications that are difficult to scale, and a choice between countless minor bugs entering production or enormous test suites that take ages to run.

    <p> Traditionally web development thinking has placed a false dichotomy of Java (for type-safety, scalability, and high performance) or dynamic languages for high productivity. We think you can have both options, and more. The key is to start with haskell- a compiled, type-safe, yet higly productive language.

    <p> Web developers have been able to opt for the ease of use of dynamic languages because often the performance problems are focused around the database. However, there are usually critical parts of an application where performance of application code is a bottleneck, and most applications can achieve noticeably faster response times with compiled code.

    <p> Scalability- how many simultaneous users an application can take on- is often more important than raw performance. This is a huge problem in application code for traditional web development because of blocking IO. This has led the rise of event-based web frameworks- node.js for javascript, Twisted/Tornado for python, and Goliath for ruby. These frameworks finally allow for high scalability of application code, but end up forcing a constrained development model back onto the programmer. In contrast, Yesod application code is independent of deployment options, but offers the #
      <a href=@{EntryR "preliminary-warp-cross-language-benchmarks"}> highly scalable Warp web server, benchmarked to handle more concurrent requests than any of the dynamic alternatives.

<section #what>
    <h1>What
    <p> Yesod is in many ways a traditional MVC REST web framework- the revolution comes from consitently applying haskell's strengths to that model to achieve web applications that are:
    <ul>
        <li>type-safe
        <li>secure
        <li>RESTful
        <li>fast and scalable
    <p> Our philosophy is to leverage the strengths of Haskell's strong type system wherever possible. Types find a lot of defects without ever writing a test, but we also build upon this system to provide high-level guarantees. We are able to create type-safe URLs, protect against XSS vulnerabilities, and avoid SQL injection attacks. In Yesod, the compiler is the first line of defense against bugs and security holes.
    <p> Yesod is built on a number of sophisticated techniques to provide fast performance. Enumerators provide constant memory usage; blaze-builder efficiently generates html. However, the tedious aspects of performance are kept under the hood so that a user can reap their benefits without boilerplate.
    <p> Scalability is achieved through the #
        <a href=@{EntryR "announcing-warp"}> Warp web server, which can handle tens of thousands of simultaneous requests.
    <p> When our goals conflict with programmer productivity, we use haskell's most advanced compile-time features (template haskell and quasi-quoting) to keep things declaritive.
    <p> Instead of creating a single, monolithic package containing our entire framework, Yesod has spun off dozens of individual packages that can be used independently of each other. But all of these packages have been designed to integrate well with each other to make your Yesod coding as productive as possible.

<div .clear>

<section #docs>
    <h1>Docs
    <p>
        \The main resource for learning Yesod is this website. If you're ready to sit down and learn, you should really #
        <a href="@{BookR}">read the book
        \, which has lots of prose as well as examples and links to blog posts. For a gentler initiation, you can #
        <a href="@{ScreencastsR}">watch the screencasts.
        \ When you need more in-depth information about specific functions, you'll want to look at the Haddocks on Hackage. Start with the #
        <a href="http://hackage.haskell.org/package/yesod">Yesod docs
        \ and follow the links from there.
    <p>Note: Due to the nature of the Hackage server, sometimes the Haddocks for a specific version of Yesod don't compile. This does not necessarily mean that there is a bug in the code, it could be caused by a number of different problems. In that case, you can try looking at an older version of the package.

<section #who>
    <h1>Who
    <ul>
        <li>
            <a href="http://www.haskellers.com/user/snoyberg/">Michael Snoyman
        <li>
            <a href="http://www.haskellers.com/user/342/">Greg Weber
        <li>
            <a href="http://www.haskellers.com/user/mattbrown/">Matt Brown
    <p>In addition to the core team, the following people have contributed add-ons and other community software around Yesod:
    <ul>
        <li>
            <a href="http://github.com/alanz">Alan Zimmerman
        <li>
            <a href="http://www.haskellers.com/user/simonmichael/">Simon Michael
        <li>
            <a href="http://github.com/ajdunlap">Alexander Dunlap
        <li>
            <a href="http://www.haskellers.com/user/meteficha/">Felipe Lessa
        <li>
            <a href="http://pbrisbin.com/">Patrick Brisbin

<div .clear>
