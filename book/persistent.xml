<?xml version="1.0" encoding="utf-8"?>
<chapter id="persistent" status="Unproofed">
    <title>Persistent</title>
    <intro>
      <p id="i1">Forms deal with the boundary between the user and the application. Another boundary we need to deal with is between the application and the storage layer. Whether it be a SQL database, a YAML file, or a binary blob, odds are you have to work to get your storage layer to accept your application datatypes. Persistent is Yesod's answer to data storage- a type-safe universal data store interface for haskell. 
      </p>
        <p id="i1.5">
          Haskell has many different database bindings available. However, most of these have little knowledge of a schema and therefore do not provide useful static guarantees and force database-dependent interfaces and data structures on the programmer. Haskellers have attempted a more revolutionary route of creating haskell specific data stores to get around these flaws that allow one to easily store any haskell type. These options are great for certain use cases, but they constrain one to the storage techniques provided by the library, do not interface well with other languages, and the flexibility can also mean one must write reams of code for querying data. In contrast, Persistent allows us to choose among existing databases that are highly tuned for different data storage use cases, interoperate with other programming languages, and to use a safe and productive query interface.
        </r>
        <p id="i2">Persistent follows the guiding principles of type safety and concise, declarative syntax. Some other nice features are:</p>
        <ul>
            <li>Database-agnostic. While the most highly supported backends are Postgresql and SQLite, there is alpha support for MongoDB.</li>
            <li>By being non-relational in nature, we simultaneously are able to support a wider number of storage layers and are not constrained by some of the performance bottlenecks incurred through joins.</li>
            <li>A major source of frustration in dealing with SQL databases is changes to the schema. Persistent can automatically perform database migrations.</li>
        </ul>
    </intro>
    <section id="boundary">
        <title>Solving the boundary issue</title>
        <p id="b1">Let's say you are storing information on people in a SQL database. Your table might look something like:</p>
        <codeblock>CREATE TABLE Person(id SERIAL PRIMARY KEY, name VARCHAR NOT NULL, age INTEGER)</codeblock>
        <p id="b2">And if you are using a database like PostgreSQL, you can be guaranteed that the database will never store some arbitrary text in your age field. (The same cannot be said of SQLite, but let's forget about that for now.) To mirror this database table, you would likely create a Haskell datatype that looks something like:</p>
        <codeblock>data Person = Person
    { personName :: String
    , personAge :: Int
    }</codeblock>
        <p id="b3">It looks like everything is type safe: the database schema matches our Haskell datatypes, the database ensures that invalid data can never make it into our data store, and everything is generally awesome. Well, until:</p>
        <ul>
            <li>You want to pull data from the database, and the database layer gives you the data in an untyped format.</li>
            <li>You want to find everyone older than 32, and you accidently write "thirtytwo" in your SQL statement. Guess what: that will compile just fine, and you won't find out you have a problem until runtime.</li>
            <li>You decide you want to do something as simple as find the first 10 people alphabetically. No problem... until you make a typo in your SQL. Once again, you don't find out until runtime.</li>
        </ul>
        <p id="b4">In dynamic languages, the answers to these issues is unit testing. For everything that <i>can</i> go wrong, make sure you write a test case. But as I am sure you are aware by now, that doesn't jive well with the Yesod approach to things. We like to take advantage of Haskell's strong typing to save us wherever possible, and data storage is no exception.</p>
        <p id="b5">So the question remains: how can we use Haskell's type system to save the day?</p>
        <section id="types">
            <title>Types</title>
            <p id="ba1">Like routing, there is nothing intrinsically difficult about type-safe data access. It just requires a lot of monotonous, error prone, boiler plate code. This is a perfect use case for some Template Haskell to generate this code for us automatically. To start off with, let's analyze some data types and type classes.</p>
            <p id="ba2"><code>PersistValue</code> is the basic building block of Persistent. It is a very simple datatype that can represent data that gets sent to and from a database. Its definition is:</p>
            <codeblock> data PersistValue = PersistText Text
                  | PersistByteString ByteString
                  | PersistInt64 Int64
                  | PersistDouble Double
                  | PersistBool Bool
                  | PersistDay Day
                  | PersistTimeOfDay TimeOfDay
                  | PersistUTCTime UTCTime
                  | PersistNull
                  | PersistList [PersistValue]
                  | PersistMap [(T.Text, PersistValue)]
                  | PersistForeignKey ByteString -- ^ intended especially for MongoDB backend
                </codeblock>
            <p id="ba4">Each Persistent backend needs to know how to translate the relevant values into something the database can understand. However, it would be awkward do have to express all of our data simply in terms of these basic types. The next layer is the <code>PersistField</code> typeclass, which defines how an arbitrary Haskell datatype can be marshaled to and from a <code>PersistValue</code>. A PersistField correlates to a column in a SQL database. In our person example above, name and age would be our <code>Persistfield</code>s.</p>
            <p id="ba5">To tie up the user side of the code, our last typeclass is <code>PersistEntity</code>. An instance of PersistEntity correlates with a table in a SQL database. This typeclass defines a number of functions and some associated types.
        </section>
        <section id="codegen">
            <title>Code Generation</title>
            <p id="bb1">In order to ensure that the PersistEntity instances match up properly with your Haskell datatypes, Persistent takes responsibility for both. This is also good from a <abbr title="Don't Repeat Yourself">DRY</abbr> perspective: you only need to define your entities once. Let's see a quick example:</p>
            <snippet name="persistent-person"/>
            <p id="bb2">We use a combination of Template Haskell and Quasi-Quotation (like when defining routes): persist is a quasi-quoter which converts a whitespace-sensitive syntax into a list of entity definitions. mkPersist takes that list of entities and declares:</p>
            <ul>
                <li>One Haskell datatype for each entity.</li>
                <li>A PersistEntity instance for each datatype defined.</li>
            </ul>
            <p id="bb3">Of course, the interesting part is how to use this datatype once it is defined.</p>
            <snippet name="persistent-person-usage"/>
            <p id="bb4">We start off with some standard database connection code. In this case, we used the single-connection functions. Persistent also comes built in with connection pool functions, which we will generally want to use in production.</p>
            <p id="bb5">In this example, we have seen two functions: insert creates a new record in the database and returns its ID. Like everything else in Persistent, IDs are type safe. Each PersistEntity has an associated type called <code>Key</code>. So when you call <code>insert $ Person "Michael" 25</code>, it gives you a value back of type <code>Key Person</code>.</p>
            <p id="bb6">The next function we see is get, which attempts to load a value from the database using a <code>Key</code>. In Persistent, you never need to worry that you are using the key from the wrong table: trying to load up a different entity (like House) using a <code>Key Person</code> will never compile.</p>
        </section>
        <section id="persistbackend">
            <title>PersistBackend</title>
            <p id="bc1">One last detail is left unexplained from the previous example: what are those withSqliteConn and runSqlConn functions doing, and what is that monad that our database actions are running in?</p>
            <p id="bc2">All database actions need to occur within an instance of <code>PersistBackend</code>. As its name implies, every backend (PostgreSQL, SQLite, MongoDB) defines its own instance of PersistBackend. This is where all the translations from <code>PersistValue</code> to database-specific values occur, where SQL query generation happens, and so on.</p>
            <advanced>
                <p id="bc3">As you can imagine, even though PersistBackend provides a safe, well-typed interface to the outside world, there are a lot of database interactions that could go wrong. However, by testing this code automatically and thoroughly in a central location, we can centralize our error-prone code into a single location and make sure it is as bug-free as possible.</p>
            </advanced>
            <p id="bc4">withSqliteConn creates a single connection to a database using its supplied connection string. For our test cases, we will use ":memory:", which simply uses an in-memory database. runSqlConn uses that connection to run the inner action, in this case, SqlPersist. Both SQLite and PostgreSQL share the same instance of PersistBackend.</p>
            <p id="bc5">One important thing to note is that everything which occurs inside a single call to runSqlConn runs in a single transaction. This has two important implications:</p>
            <ul>
                <li>For many databases, committing a transaction can be a costly activity. By putting multiple steps into a single transaction, you can speed up code dramatically.</li>
                <li>If an exception is thrown anywhere inside a single call to runSqlConn, all actions will be rolled back.</li>
            </ul>
        </section>
    </section>
    <section id="migrations">
        <title>Migrations</title>
        <p id="m1">I'm sorry to tell you, but so far I have lied to you a bit: the example from the previous section does not actually work. If you try to run it, you will get an error message about a missing table.</p>
        <p id="m2">For SQL databases, one of the major pains can be managing schema changes. Instead of leaving this to the user, Persistent steps in to help, but you have to <i>ask</i> it to help. Let's see what this looks like:</p>
        <snippet name="persistent-migrate1"/>
        <p id="m3">With this one little code change, Persistent will automatically create your Person table for you. This split between runMigration and migrate allows you to migrate multiple tables simultaneously.</p>
        <p id="m4">This works when dealing with just a few entities, but can quickly get tiresome once we are dealing with a dozen entities. Instead of repeating yourself, Persistent provides a helper function:</p>
        <snippet name="persistent-migrate2"/>
        <p id="m5">mkMigrate is a Template Haskell function which creates a new function that will automatically call migrate on all entities defined in the persist block. The share function is just a little helper that passes the information from the persist block to each Template Haskell function and concatenates the results.</p>
        <p id="m6">Persistent has very conservative rules about what it will do during a migration. It starts by loading up table information from the database, complete with all defined SQL datatypes. It then compares that against the entity definition given in the code. For simple cases, it will automatically alter the schema:</p>
        <ul>
            <li>The datatype of a field changed. However, the database may object to this modification if the data cannot be translated.</li>
            <li>A field was added. However, if the field is not null, no default value is supplied (we'll discuss defaults later) and there is already data in the database, the database will not allow this to happen.</li>
            <li>A field is converted from not null to null. In the opposite case, Persistent will attempt the conversion, contingent upon the database's approval.</li>
            <li>A brand new entity is added.</li>
        </ul>
        <p id="m7">However, there are a number of cases that Persistent will not handle:</p>
        <ul>
            <li>Field or entity renames: Persistent has no way of knowing that "name" has now been renamed to "fullName": all it sees is an old field called name and a new field called fullName.</li>
            <li>Field removals: since this can result in data loss, Persistent by default will refuse to perform the action (you can force the issue by using runMigrationUnsafe instead of runMigration, though it is <b>not</b> recommended).</li>
        </ul>
        <p id="m8">runMigration will print out the migrations it is running on stderr (you can bypass this by using runMigrationSilent). Whenever possible, it uses ALTER TABLE calls. However, in SQLite, ALTER TABLE has very limited abilities, and therefore Persistent must resort to copying the data from one table to another.</p>
        <p id="m9">Finally, if instead of <i>performing</i> a migration, you just want Persistent to give you hints about what migrations are necessary, use the printMigration function. This function will print out the migrations which runMigration would perform for you. This may be useful for performing migrations that Persistent is not capable of, for adding arbitrary SQL to a migration, or just to log what migrations occurred.</p>

        <advanced>
            <p id="m10">Although there is no official Persistent integration, there is a haskell package that can assist with running migrations called <hackage>dbmigrations</hackage>.</p>
        </advanced>

    </section>
    <section id="attributes">
        <title>Attributes</title>
        <p id="attr1">So far, we have seen a very simple syntax for our persist blocks: a line for the name of our entities, and then an indented line for each field with two words: the name of the field and the datatype of the field. Persistent handles more than this: you can assign an arbitrary list of attributes after the first two words on a line.</p>
        <p id="attr2">Let's say that we want to add two new fields to our Person entity: a favorite color (optional), and the timestamp of when he/she was added to the system. For entities already in the database, we want to just use the current date-time for that timestamp.</p>
        <snippet name="persistent-attributes"/>
        <p id="attr3">Maybe is one of many built in, single word attributes. We will see many more below. The default attribute is backend specific, and uses whatever syntax is understood by the database. In this case, it uses the database's built-in now() function. Let's say we now want to add a field for favorite programming language:</p>
        <snippet name="persistent-attributes2"/>
        <p id="attr4">We need to surround the string with single quotes so that the database can properly interpret it. Finally, Persistent can use double quotes for containing white space, so let's say we want to set someone's default home country to the El Salvador:</p>
        <snippet name="persistent-attributes3"/>
    </section>
    <section id="associated-types">
        <title>Associated Types</title>
        <p id="a1">We saw above that each PersistEntity has a Key associated type to provide for type-safe lookups by numerical ID. But let's say we are not satisfied with looking up by ID: I want to get every person from my database with the name "Michael" who is older than 25. In SQL, there's no type-safe way to do this. In Persistent, we can do it easily.</p>
        <snippet name="persistent-where"/>
        <p id="a2">The first thing to notice is that we have added some extra attributes to our persist block: Eq for name and Gt for age. There are six filtering attributes:</p>
        <ul>
            <li>Eq- equals</li>
            <li>Ne- not equals</li>
            <li>Lt- less than</li>
            <li>Le- less than or equals</li>
            <li>Gt- greater than</li>
            <li>Ge- greater than or equals</li>
            <li>In- equals any member of a list (like a SQL IN)</li>
        </ul>
        <p id="a3">By adding these attribute, mkPersist automatically adds corresponding data constructors to the <code>Filter</code> associated type. In our case, this comes out to the equivalent of</p>
        <codeblock>data Filter Person = PersonNameEq String | PersonAgeGt Int</codeblock>
        <p id="a4">Notice how the datatype of the field is encoded in the data constructor itself. This is the very heart of Persistent's type safety. It's impossible to type in <code>PersonAgeGt "twenty-five"</code>, the compiler just won't have it.</p>
        <p id="a5">Similarly, Persistent uses the <code>Order</code> associated type for sorting results. This comes with two attributes: Asc for sorting in ascending order, and Desc for descending order. So assuming we want to get all Michaels older than 25 in descending chronological order:</p>
        <snippet name="persistent-order"/>
        <p id="a6">Finally, let's say we have decided to rename everyone older than 25 and named Michael to Mike. For this, we use the Update associated type:</p>
        <snippet name="persistent-update"/>
        <p id="a7">There are a number of functions which take these associated types as parameters. As usual, the Haddock documentation is always the most authoritative source for a complete lists of API functions.</p>
        <section id="unique">
            <title>Uniqueness</title>
            <p id="u1">The final associated type is is <code>Unique</code>. Its usage is slightly different than that of its siblings:</p>
            <snippet name="persistent-unique"/>
            <p id="u2">To declare a unique combination of fields, we add an extra line to our declaraction. Persistent knows that it is defining a unique constructor, since the line begins with a capital letter. Each following word must be a field in this entity.</p>
            <p id="u3">The main restriction on uniqueness is that it can only be applied non-null fields. The reason for this is that the SQL standard is ambiguous on how uniqueness should be applied to NULL (eg, is NULL=NULL true or false?). Besides that ambiguity, most SQL engines in fact implement rules which would be <i>contary</i> to what the Haskell datatypes for anticipate (eg, PostgreSQL says that NULL=NULL is false, whereas Haskell says Nothing == Nothing is True).</p>
        </section>
    </section>
    <section id="relations">
        <title>Relations</title>
        <p id="r1">Persistent allows references between your data types in a manner that is consistent with supporting non-SQL databases. We do this by embedding a Key value in the related entity. So if a person has many cars:</p>
        <snippet name="persistent-cars"/>
        <advanced>
            <p id="r3">You might be wondering what that <code>PersonId</code> is. Persistent automatically defines a type synonym <code>type PersonId = Key Person</code> for all of your entities.</p>
        </advanced>
        <p id="r4">Using this technique, it's very easy to define one-to-many relationships. To define many-to-many relationships, we need a join entity, which has a one-to-many relationship with each of the original tables. It is also a good idea to use uniqueness constraints on these. For example, to model a situation where we want to track which people have shopped in which stores:</p>
        <snippet name="persistent-stores"/>
    </section>
    <section id="custom-field">
        <title>Custom Fields</title>
        <p id="cf1">Occassionally, you will want to define a custom field to be used in your datastore. The most common case is an enumeration, such as employment status. For this, Persistent provides a helper Template Haskell function:</p>
        <snippet name="persistent-derive"/>
        <p id="cf2">derivePersistField stores the data in the database using a string field, and performs marshaling using the Show and Read instances of the datatype. This may not be as efficient as storing via an integer, but it is much more future proof: even if you add extra constructors in the future, your data will still be valid.</p>
    </section>
    <section id="fixme">
        <title>FIXME Outline</title>

        <ul>
            <li>mkToForm</li>
            <li>Advanced: select enumerator interface</li>
            <li>raw SQL</li>
            <li>Join modules</li>
            <li>custom table/column names</li>
        </ul>
    </section>
</chapter>
